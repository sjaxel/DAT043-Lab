import java.io.*;
import java.util.*;
import java.util.regex.*;

public class RatNum {
	// Instance variables that are private.
	private int m, n;
	
	//Constructor methods
	RatNum() {
		this(0, 1);
	}
	RatNum(int a) {
		this(a, 1);
	}
	RatNum(int a, int b) {
		if (b != 0) {
		    if (a == 0) {
		        m = 0;
		        n = 1;
		    }
		    else {
		        if (b < 0) {
		            a = -a;
		            b = -b;
		            }
			    if (RatNum.sgd(a, b) == 1) {
			    	m = a;
			    	n = b;
			    }
			    else {
			    	m = a/RatNum.sgd(a, b);
			    	n = b/RatNum.sgd(a, b);
			    }
			}
		}
		else {
			throw new NumberFormatException("Denominator = 0");
		}
	}
	//Copy constructor
	RatNum(RatNum r) {
		m = r.getNumerator();
		n = r.getDenominator();
	}
	
	//Parse constructor
	RatNum (String s) {
	    m = RatNum.parse(s).getNumerator();
        n = RatNum.parse(s).getDenominator();
    }
	
	//Methods
	public int getNumerator() { // Returns Numerator
		return m;
	}
	
	public int getDenominator() { // Return Denominator
		return n;
	}
	
	// Greatest common denomoniator method
	public static int sgd(int m, int n) {
		if ((m != 0) && (n != 0)) {
			int r = 1;
			while (r != 0) {
				r = m % n;
				m = n;
				n = r;
			}
			return Math.abs(m);
		}
		throw new IllegalArgumentException ();	
	}
	
	//To string method. Returns as string.
	public String toString() {
	    String s = "Talet är: " + m + "/" + n;
	    return s;
	    }
	    
    //To double method
    public double toDouble() {
        return ((double) m/(double) n);
	}
	
	//Parse method.
	public static RatNum parse(String s) {
	    Pattern pattern_whitespace = Pattern.compile("\\s");
	    Pattern pattern_slash = Pattern.compile("/");
        Matcher matcher_whitespace = pattern_whitespace.matcher(s);
        Matcher matcher_slash = pattern_slash.matcher(s);
        boolean found_whitespace = matcher_whitespace.find();
        boolean found_slash = matcher_slash.find();
        if (found_whitespace)
            throw new NumberFormatException("Whitespace in exp");
	    String[] tokens = s.split("[/]");
	    if (tokens.length == 1 && !(found_slash)) {
	        int m = Integer.parseInt(tokens[0]);
	        return new RatNum(m);
	    }
	    else if (tokens.length == 2) {
	        int m = Integer.parseInt(tokens[0]);
	        int n = Integer.parseInt(tokens[1]);
	        return new RatNum(m, n);	        
	    }
	    else {
	        throw new NumberFormatException("Incorrect formating");
	    }
	}
	
	//Clone method
	public Object clone() {
	    Object clone = new RatNum(m, n);
	    return clone;
	}
	
	public boolean equals(RatNum r) {
	    if (m == r.getNumerator() && n == r.getDenominator())
	        return true;
	    else
	        return false;
	}
	
	public boolean lessThan(RatNum r) {
	    int a = r.getNumerator();
	    int b = r.getDenominator();
	    if (m*b < a*n)
	        return true;
	    else
	        return false;
	}
	
	public RatNum add(RatNum r) {
	    int a = r.getNumerator();
	    int b = r.getDenominator();
	    return new RatNum((m*b+n*a), (n*b));
	}
	
	public RatNum sub(RatNum r) {
	    int a = r.getNumerator();
	    int b = r.getDenominator();
	    return new RatNum((m*b-n*a), (n*b));
	}
	
	public RatNum mul(RatNum r) {
	    int a = r.getNumerator();
	    int b = r.getDenominator();
	    return new RatNum((m*a), (n*b));
	}
	
	public RatNum div(RatNum r) {
	    int a = r.getNumerator();
	    int b = r.getDenominator();
	    return new RatNum((m*b), (n*a));
	}	
}



// Output av (java RatNumTest3 < indata.txt) > utdata.txt
Skriv uttryck på formen a/b ? c/d, där ? är något av tecknen + - * / = <
> 1/3 + 1/4	--> Talet är: 7/12
> 2/9 * -4/5	--> Talet är: -8/45
> 2/6 - 7/9	--> Talet är: -4/9
> 7/-2 / -2/5	--> Talet är: 35/4
> -5/10 + -3/4	--> Talet är: -5/4
> -5/3 * 4	--> Talet är: -20/3
> 7/9 * 2	--> Talet är: 14/9
> -5 * 1/3	--> Talet är: -5/3
> 2 / -5	--> Talet är: -2/5
> 2/5 = 40/100	--> true
> 6/18 = -1/3	--> false
> 2/9 < 1/5	--> false
> -5/9 < 1/2	--> true
> 1/2 +1/3	--> Felaktigt uttryck!
> 1/5	--> Felaktigt uttryck!
> /4 + 1/3	--> NumberFormatException: For input string: ""
> 5/ + 1/3	--> NumberFormatException: Incorrect formating
> 1//4 + 1/4	--> NumberFormatException: Incorrect formating
> 1/ - 2 + 1/3	--> Felaktigt uttryck!
> 1/3 a + 1/3	--> Felaktigt uttryck!
> -/3 + 1/3	--> NumberFormatException: For input string: "-"
> 1/3 + 1/3 + 1/3	--> Felaktigt uttryck!
> 1/3 & 1/3	--> Felaktig operator!
> 1/0 + 1/3	--> NumberFormatException: Denominator = 0
> 1 / 0	--> NumberFormatException: Denominator = 0


//Beskrivning av RatNumTest3.java
Programmet börjar med att köra metoden divtester() från RatNumTest2 som kollar
att konstruktorer och negativa parametrar fungerar. Den kallar sedan på sin egen
metod divtester() för att kontrollera metoderna equals, clone och toDouble. 
Efter detta startar den en input-stream som tar in uttryck från användaren.
Uttryck som användaren ger utsätts för en rad olika tester.
Först kontrollerar den med hjälp av Scanner att indatan innehåller 3 uttryck
separerade av whitespace, sedan kontrollerar den att de 3 uttrycken är giltiga
och att operatorerna utförs korrekt och ger rätt svar.
> 
